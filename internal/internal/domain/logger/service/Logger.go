// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(msg, args)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) Debug(msg interface{}, args ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string, args ...any)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(msg string, args ...any)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// DebugContext provides a mock function for the type MockLogger
func (_mock *MockLogger) DebugContext(ctx context.Context, msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(ctx, msg, args)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_DebugContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebugContext'
type MockLogger_DebugContext_Call struct {
	*mock.Call
}

// DebugContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) DebugContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_DebugContext_Call {
	return &MockLogger_DebugContext_Call{Call: _e.mock.On("DebugContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_DebugContext_Call) Run(run func(ctx context.Context, msg string, args ...any)) *MockLogger_DebugContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_DebugContext_Call) Return() *MockLogger_DebugContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_DebugContext_Call) RunAndReturn(run func(ctx context.Context, msg string, args ...any)) *MockLogger_DebugContext_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(msg, args)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) Error(msg interface{}, args ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string, args ...any)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(msg string, args ...any)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// ErrorContext provides a mock function for the type MockLogger
func (_mock *MockLogger) ErrorContext(ctx context.Context, msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(ctx, msg, args)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_ErrorContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorContext'
type MockLogger_ErrorContext_Call struct {
	*mock.Call
}

// ErrorContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) ErrorContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_ErrorContext_Call {
	return &MockLogger_ErrorContext_Call{Call: _e.mock.On("ErrorContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_ErrorContext_Call) Run(run func(ctx context.Context, msg string, args ...any)) *MockLogger_ErrorContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_ErrorContext_Call) Return() *MockLogger_ErrorContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_ErrorContext_Call) RunAndReturn(run func(ctx context.Context, msg string, args ...any)) *MockLogger_ErrorContext_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(msg, args)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) Info(msg interface{}, args ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, args ...any)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(msg string, args ...any)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// InfoContext provides a mock function for the type MockLogger
func (_mock *MockLogger) InfoContext(ctx context.Context, msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(ctx, msg, args)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_InfoContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoContext'
type MockLogger_InfoContext_Call struct {
	*mock.Call
}

// InfoContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) InfoContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_InfoContext_Call {
	return &MockLogger_InfoContext_Call{Call: _e.mock.On("InfoContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_InfoContext_Call) Run(run func(ctx context.Context, msg string, args ...any)) *MockLogger_InfoContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_InfoContext_Call) Return() *MockLogger_InfoContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_InfoContext_Call) RunAndReturn(run func(ctx context.Context, msg string, args ...any)) *MockLogger_InfoContext_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLogger
func (_mock *MockLogger) Warn(msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(msg, args)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) Warn(msg interface{}, args ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(msg string, args ...any)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(msg string, args ...any)) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// WarnContext provides a mock function for the type MockLogger
func (_mock *MockLogger) WarnContext(ctx context.Context, msg string, args ...any) {
	if len(args) > 0 {
		_mock.Called(ctx, msg, args)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_WarnContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnContext'
type MockLogger_WarnContext_Call struct {
	*mock.Call
}

// WarnContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...any
func (_e *MockLogger_Expecter) WarnContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_WarnContext_Call {
	return &MockLogger_WarnContext_Call{Call: _e.mock.On("WarnContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_WarnContext_Call) Run(run func(ctx context.Context, msg string, args ...any)) *MockLogger_WarnContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_WarnContext_Call) Return() *MockLogger_WarnContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_WarnContext_Call) RunAndReturn(run func(ctx context.Context, msg string, args ...any)) *MockLogger_WarnContext_Call {
	_c.Run(run)
	return _c
}
