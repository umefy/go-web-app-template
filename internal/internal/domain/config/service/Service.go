// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/umefy/go-web-app-template/internal/domain/config"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAppConfig provides a mock function for the type MockService
func (_mock *MockService) GetAppConfig() *config.AppConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppConfig")
	}

	var r0 *config.AppConfig
	if returnFunc, ok := ret.Get(0).(func() *config.AppConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.AppConfig)
		}
	}
	return r0
}

// MockService_GetAppConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConfig'
type MockService_GetAppConfig_Call struct {
	*mock.Call
}

// GetAppConfig is a helper method to define mock.On call
func (_e *MockService_Expecter) GetAppConfig() *MockService_GetAppConfig_Call {
	return &MockService_GetAppConfig_Call{Call: _e.mock.On("GetAppConfig")}
}

func (_c *MockService_GetAppConfig_Call) Run(run func()) *MockService_GetAppConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetAppConfig_Call) Return(appConfig *config.AppConfig) *MockService_GetAppConfig_Call {
	_c.Call.Return(appConfig)
	return _c
}

func (_c *MockService_GetAppConfig_Call) RunAndReturn(run func() *config.AppConfig) *MockService_GetAppConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDBConfig provides a mock function for the type MockService
func (_mock *MockService) GetDBConfig() *config.DBConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBConfig")
	}

	var r0 *config.DBConfig
	if returnFunc, ok := ret.Get(0).(func() *config.DBConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.DBConfig)
		}
	}
	return r0
}

// MockService_GetDBConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBConfig'
type MockService_GetDBConfig_Call struct {
	*mock.Call
}

// GetDBConfig is a helper method to define mock.On call
func (_e *MockService_Expecter) GetDBConfig() *MockService_GetDBConfig_Call {
	return &MockService_GetDBConfig_Call{Call: _e.mock.On("GetDBConfig")}
}

func (_c *MockService_GetDBConfig_Call) Run(run func()) *MockService_GetDBConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetDBConfig_Call) Return(dBConfig *config.DBConfig) *MockService_GetDBConfig_Call {
	_c.Call.Return(dBConfig)
	return _c
}

func (_c *MockService_GetDBConfig_Call) RunAndReturn(run func() *config.DBConfig) *MockService_GetDBConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrpcServerConfig provides a mock function for the type MockService
func (_mock *MockService) GetGrpcServerConfig() *config.GrpcServerConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGrpcServerConfig")
	}

	var r0 *config.GrpcServerConfig
	if returnFunc, ok := ret.Get(0).(func() *config.GrpcServerConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.GrpcServerConfig)
		}
	}
	return r0
}

// MockService_GetGrpcServerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrpcServerConfig'
type MockService_GetGrpcServerConfig_Call struct {
	*mock.Call
}

// GetGrpcServerConfig is a helper method to define mock.On call
func (_e *MockService_Expecter) GetGrpcServerConfig() *MockService_GetGrpcServerConfig_Call {
	return &MockService_GetGrpcServerConfig_Call{Call: _e.mock.On("GetGrpcServerConfig")}
}

func (_c *MockService_GetGrpcServerConfig_Call) Run(run func()) *MockService_GetGrpcServerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetGrpcServerConfig_Call) Return(grpcServerConfig *config.GrpcServerConfig) *MockService_GetGrpcServerConfig_Call {
	_c.Call.Return(grpcServerConfig)
	return _c
}

func (_c *MockService_GetGrpcServerConfig_Call) RunAndReturn(run func() *config.GrpcServerConfig) *MockService_GetGrpcServerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetHttpServerConfig provides a mock function for the type MockService
func (_mock *MockService) GetHttpServerConfig() *config.HttpServerConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpServerConfig")
	}

	var r0 *config.HttpServerConfig
	if returnFunc, ok := ret.Get(0).(func() *config.HttpServerConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.HttpServerConfig)
		}
	}
	return r0
}

// MockService_GetHttpServerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpServerConfig'
type MockService_GetHttpServerConfig_Call struct {
	*mock.Call
}

// GetHttpServerConfig is a helper method to define mock.On call
func (_e *MockService_Expecter) GetHttpServerConfig() *MockService_GetHttpServerConfig_Call {
	return &MockService_GetHttpServerConfig_Call{Call: _e.mock.On("GetHttpServerConfig")}
}

func (_c *MockService_GetHttpServerConfig_Call) Run(run func()) *MockService_GetHttpServerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetHttpServerConfig_Call) Return(httpServerConfig *config.HttpServerConfig) *MockService_GetHttpServerConfig_Call {
	_c.Call.Return(httpServerConfig)
	return _c
}

func (_c *MockService_GetHttpServerConfig_Call) RunAndReturn(run func() *config.HttpServerConfig) *MockService_GetHttpServerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoggingConfig provides a mock function for the type MockService
func (_mock *MockService) GetLoggingConfig() *config.LoggingConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoggingConfig")
	}

	var r0 *config.LoggingConfig
	if returnFunc, ok := ret.Get(0).(func() *config.LoggingConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.LoggingConfig)
		}
	}
	return r0
}

// MockService_GetLoggingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoggingConfig'
type MockService_GetLoggingConfig_Call struct {
	*mock.Call
}

// GetLoggingConfig is a helper method to define mock.On call
func (_e *MockService_Expecter) GetLoggingConfig() *MockService_GetLoggingConfig_Call {
	return &MockService_GetLoggingConfig_Call{Call: _e.mock.On("GetLoggingConfig")}
}

func (_c *MockService_GetLoggingConfig_Call) Run(run func()) *MockService_GetLoggingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetLoggingConfig_Call) Return(loggingConfig *config.LoggingConfig) *MockService_GetLoggingConfig_Call {
	_c.Call.Return(loggingConfig)
	return _c
}

func (_c *MockService_GetLoggingConfig_Call) RunAndReturn(run func() *config.LoggingConfig) *MockService_GetLoggingConfig_Call {
	_c.Call.Return(run)
	return _c
}
