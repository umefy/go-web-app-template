// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/umefy/go-web-app-template/gorm/generated/model"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockService
func (_mock *MockService) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockService_Expecter) CreateUser(ctx interface{}, user interface{}) *MockService_CreateUser_Call {
	return &MockService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockService_CreateUser_Call) Run(run func(ctx context.Context, user *model.User)) *MockService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_CreateUser_Call) Return(user1 *model.User, err error) *MockService_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockService
func (_mock *MockService) GetUser(ctx context.Context, id string) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetUser(ctx interface{}, id interface{}) *MockService_GetUser_Call {
	return &MockService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockService_GetUser_Call) Run(run func(ctx context.Context, id string)) *MockService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetUser_Call) Return(user *model.User, err error) *MockService_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_GetUser_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.User, error)) *MockService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockService
func (_mock *MockService) GetUsers(ctx context.Context) ([]*model.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetUsers(ctx interface{}) *MockService_GetUsers_Call {
	return &MockService_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *MockService_GetUsers_Call) Run(run func(ctx context.Context)) *MockService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetUsers_Call) Return(users []*model.User, err error) *MockService_GetUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockService_GetUsers_Call) RunAndReturn(run func(ctx context.Context) ([]*model.User, error)) *MockService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockService
func (_mock *MockService) UpdateUser(ctx context.Context, id string, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, id, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *model.User) error); ok {
		r1 = returnFunc(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - user *model.User
func (_e *MockService_Expecter) UpdateUser(ctx interface{}, id interface{}, user interface{}) *MockService_UpdateUser_Call {
	return &MockService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, user)}
}

func (_c *MockService_UpdateUser_Call) Run(run func(ctx context.Context, id string, user *model.User)) *MockService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *model.User
		if args[2] != nil {
			arg2 = args[2].(*model.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_UpdateUser_Call) Return(user1 *model.User, err error) *MockService_UpdateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id string, user *model.User) (*model.User, error)) *MockService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
