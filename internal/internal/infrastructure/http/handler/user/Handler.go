// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"github.com/umefy/go-web-app-template/internal/infrastructure/http/handler"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// ApplyMiddlewares provides a mock function for the type MockHandler
func (_mock *MockHandler) ApplyMiddlewares(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware) handler.HandlerFunc {
	var tmpRet mock.Arguments
	if len(middlewares) > 0 {
		tmpRet = _mock.Called(originalHandler, middlewares)
	} else {
		tmpRet = _mock.Called(originalHandler)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ApplyMiddlewares")
	}

	var r0 handler.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(handler.HandlerFunc, ...handler.Middleware) handler.HandlerFunc); ok {
		r0 = returnFunc(originalHandler, middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.HandlerFunc)
		}
	}
	return r0
}

// MockHandler_ApplyMiddlewares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyMiddlewares'
type MockHandler_ApplyMiddlewares_Call struct {
	*mock.Call
}

// ApplyMiddlewares is a helper method to define mock.On call
//   - originalHandler handler.HandlerFunc
//   - middlewares ...handler.Middleware
func (_e *MockHandler_Expecter) ApplyMiddlewares(originalHandler interface{}, middlewares ...interface{}) *MockHandler_ApplyMiddlewares_Call {
	return &MockHandler_ApplyMiddlewares_Call{Call: _e.mock.On("ApplyMiddlewares",
		append([]interface{}{originalHandler}, middlewares...)...)}
}

func (_c *MockHandler_ApplyMiddlewares_Call) Run(run func(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware)) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 handler.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(handler.HandlerFunc)
		}
		var arg1 []handler.Middleware
		var variadicArgs []handler.Middleware
		if len(args) > 1 {
			variadicArgs = args[1].([]handler.Middleware)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockHandler_ApplyMiddlewares_Call) Return(handlerFunc handler.HandlerFunc) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockHandler_ApplyMiddlewares_Call) RunAndReturn(run func(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware) handler.HandlerFunc) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockHandler
func (_mock *MockHandler) CreateUser(w http.ResponseWriter, r *http.Request) error {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHandler_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockHandler_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) CreateUser(w interface{}, r interface{}) *MockHandler_CreateUser_Call {
	return &MockHandler_CreateUser_Call{Call: _e.mock.On("CreateUser", w, r)}
}

func (_c *MockHandler_CreateUser_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_CreateUser_Call) Return(err error) *MockHandler_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHandler_CreateUser_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) error) *MockHandler_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockHandler
func (_mock *MockHandler) GetUser(w http.ResponseWriter, r *http.Request) error {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHandler_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockHandler_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) GetUser(w interface{}, r interface{}) *MockHandler_GetUser_Call {
	return &MockHandler_GetUser_Call{Call: _e.mock.On("GetUser", w, r)}
}

func (_c *MockHandler_GetUser_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_GetUser_Call) Return(err error) *MockHandler_GetUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHandler_GetUser_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) error) *MockHandler_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockHandler
func (_mock *MockHandler) GetUsers(w http.ResponseWriter, r *http.Request) error {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHandler_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockHandler_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) GetUsers(w interface{}, r interface{}) *MockHandler_GetUsers_Call {
	return &MockHandler_GetUsers_Call{Call: _e.mock.On("GetUsers", w, r)}
}

func (_c *MockHandler_GetUsers_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_GetUsers_Call) Return(err error) *MockHandler_GetUsers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHandler_GetUsers_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) error) *MockHandler_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function for the type MockHandler
func (_mock *MockHandler) Handle(handler1 handler.HandlerFunc) http.HandlerFunc {
	ret := _mock.Called(handler1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 http.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(handler.HandlerFunc) http.HandlerFunc); ok {
		r0 = returnFunc(handler1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}
	return r0
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - handler1 handler.HandlerFunc
func (_e *MockHandler_Expecter) Handle(handler1 interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", handler1)}
}

func (_c *MockHandler_Handle_Call) Run(run func(handler1 handler.HandlerFunc)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 handler.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(handler.HandlerFunc)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return(handlerFunc http.HandlerFunc) *MockHandler_Handle_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(handler1 handler.HandlerFunc) http.HandlerFunc) *MockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockHandler
func (_mock *MockHandler) UpdateUser(w http.ResponseWriter, r *http.Request) error {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHandler_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockHandler_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) UpdateUser(w interface{}, r interface{}) *MockHandler_UpdateUser_Call {
	return &MockHandler_UpdateUser_Call{Call: _e.mock.On("UpdateUser", w, r)}
}

func (_c *MockHandler_UpdateUser_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_UpdateUser_Call) Return(err error) *MockHandler_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHandler_UpdateUser_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) error) *MockHandler_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
