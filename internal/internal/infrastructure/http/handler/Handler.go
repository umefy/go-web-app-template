// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handler

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"github.com/umefy/go-web-app-template/internal/infrastructure/http/handler"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// ApplyMiddlewares provides a mock function for the type MockHandler
func (_mock *MockHandler) ApplyMiddlewares(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware) handler.HandlerFunc {
	var tmpRet mock.Arguments
	if len(middlewares) > 0 {
		tmpRet = _mock.Called(originalHandler, middlewares)
	} else {
		tmpRet = _mock.Called(originalHandler)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ApplyMiddlewares")
	}

	var r0 handler.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(handler.HandlerFunc, ...handler.Middleware) handler.HandlerFunc); ok {
		r0 = returnFunc(originalHandler, middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.HandlerFunc)
		}
	}
	return r0
}

// MockHandler_ApplyMiddlewares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyMiddlewares'
type MockHandler_ApplyMiddlewares_Call struct {
	*mock.Call
}

// ApplyMiddlewares is a helper method to define mock.On call
//   - originalHandler handler.HandlerFunc
//   - middlewares ...handler.Middleware
func (_e *MockHandler_Expecter) ApplyMiddlewares(originalHandler interface{}, middlewares ...interface{}) *MockHandler_ApplyMiddlewares_Call {
	return &MockHandler_ApplyMiddlewares_Call{Call: _e.mock.On("ApplyMiddlewares",
		append([]interface{}{originalHandler}, middlewares...)...)}
}

func (_c *MockHandler_ApplyMiddlewares_Call) Run(run func(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware)) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 handler.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(handler.HandlerFunc)
		}
		var arg1 []handler.Middleware
		var variadicArgs []handler.Middleware
		if len(args) > 1 {
			variadicArgs = args[1].([]handler.Middleware)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockHandler_ApplyMiddlewares_Call) Return(handlerFunc handler.HandlerFunc) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockHandler_ApplyMiddlewares_Call) RunAndReturn(run func(originalHandler handler.HandlerFunc, middlewares ...handler.Middleware) handler.HandlerFunc) *MockHandler_ApplyMiddlewares_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function for the type MockHandler
func (_mock *MockHandler) Handle(handler1 handler.HandlerFunc) http.HandlerFunc {
	ret := _mock.Called(handler1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 http.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(handler.HandlerFunc) http.HandlerFunc); ok {
		r0 = returnFunc(handler1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}
	return r0
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - handler1 handler.HandlerFunc
func (_e *MockHandler_Expecter) Handle(handler1 interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", handler1)}
}

func (_c *MockHandler_Handle_Call) Run(run func(handler1 handler.HandlerFunc)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 handler.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(handler.HandlerFunc)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return(handlerFunc http.HandlerFunc) *MockHandler_Handle_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(handler1 handler.HandlerFunc) http.HandlerFunc) *MockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
