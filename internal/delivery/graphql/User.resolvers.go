package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/umefy/go-web-app-template/internal/delivery/graphql/dataloader"
	"github.com/umefy/go-web-app-template/internal/delivery/graphql/mapping"
	"github.com/umefy/go-web-app-template/internal/delivery/graphql/model"
	userSrv "github.com/umefy/go-web-app-template/internal/service/user"
	"github.com/umefy/go-web-app-template/pkg/pagination"
	"github.com/umefy/godash/sliceskit"
	"go.opentelemetry.io/otel/attribute"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserCreateInput) (*model.User, error) {
	user, err := r.UserService.CreateUser(ctx, &userSrv.UserCreateInput{
		Email: input.Email,
		Age:   int(input.Age),
	})
	if err != nil {
		return nil, err
	}

	return mapping.DomainUserToGraphqlUser(user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, _, err := r.UserService.GetUsers(ctx, pagination.NewPagination("0", "10", "false"))
	if err != nil {
		return nil, err
	}

	return sliceskit.Map(users, mapping.DomainUserToGraphqlUser), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	tr := r.TracerProvider.Tracer("graphql.query")
	_, span := tr.Start(ctx, "User")
	span.SetAttributes(attribute.String("id", id))
	defer span.End()

	user, err := r.UserService.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return mapping.DomainUserToGraphqlUser(user), nil
}

// Orders is the resolver for the orders field.
func (r *userResolver) Orders(ctx context.Context, obj *model.User) ([]*model.Order, error) {
	orders, err := dataloader.GetOrdersByUserID(ctx, obj.ID, r.Logger)
	if err != nil {
		return []*model.Order{}, err
	}
	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
