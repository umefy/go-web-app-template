package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"time"

	"github.com/umefy/go-web-app-template/internal/delivery/graphql/model"
)

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	ch := make(chan *model.Time)
	go func() {
		defer close(ch)

		ticker := time.NewTicker(3 * time.Second)
		defer ticker.Stop()

		currentTime := time.Now()
		ch <- &model.Time{
			UnixTime:  int32(currentTime.Unix()),
			Timestamp: currentTime.Format(time.RFC3339),
		}
		for {
			select {
			case <-ctx.Done():
				fmt.Println("Subscription closed")
				return
			case <-ticker.C:
				currentTime := time.Now()
				ch <- &model.Time{
					UnixTime:  int32(currentTime.Unix()),
					Timestamp: currentTime.Format(time.RFC3339),
				}
			}
		}
	}()

	return ch, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
