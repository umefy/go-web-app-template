package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/umefy/go-web-app-template/gorm/generated/query"
	userModel "github.com/umefy/go-web-app-template/internal/domain/user/model"
	"github.com/umefy/go-web-app-template/internal/infrastructure/database"
	"github.com/umefy/go-web-app-template/internal/infrastructure/http/graphql/mapping"
	"github.com/umefy/go-web-app-template/internal/infrastructure/http/graphql/model"
	"github.com/umefy/godash/sliceskit"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserCreateInput) (*model.User, error) {
	return database.WithTx(ctx, r.DbQuery, r.LoggerService, func(ctx context.Context, tx *query.QueryTx) (*model.User, error) {
		userModel, err := r.UserService.CreateUser(ctx, &userModel.UserCreateInput{
			Email: input.Email,
			Age:   int(input.Age),
		}, tx)
		if err != nil {
			return nil, err
		}

		return mapping.UserModelToGraphqlUser(userModel), nil
	})
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.GetUsers(ctx)
	if err != nil {
		return nil, err
	}

	return sliceskit.Map(users, mapping.UserModelToGraphqlUser), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
