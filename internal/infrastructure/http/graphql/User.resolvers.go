package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"strconv"
	"time"

	userModel "github.com/umefy/go-web-app-template/internal/domain/user/model"
	"github.com/umefy/go-web-app-template/internal/infrastructure/http/graphql/model"
	"github.com/umefy/godash/sliceskit"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.GetUsers(ctx)
	if err != nil {
		return nil, err
	}

	return sliceskit.Map(users, func(user *userModel.User) *model.User {
		return &model.User{
			ID:        strconv.Itoa(user.ID),
			Name:      user.Name,
			Age:       int32(user.Age),
			CreatedAt: user.CreatedAt.Format(time.RFC3339),
			UpdatedAt: user.UpdatedAt.Format(time.RFC3339),
		}
	}), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
