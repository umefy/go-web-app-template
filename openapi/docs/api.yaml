openapi: 3.1.1
info:
  title: Web apps API
  version: '0.1'
  description: |
    API Description
  termsOfService: https://api.server.test/terms/
  contact:
    name: API Support
    email: support@api.server.com
  license:
    name: MIT License
    identifier: MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Local server

paths:
  /users:
    post:
      operationId: createUser
      tags:
        - users
      summary: Create a new user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get all users
      description: Get all users
      parameters:
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/IncludeTotalParam'
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetAllResponse'
  /users/{id}:
    get:
      operationId: getUser
      tags:
        - users
      summary: Get a user by ID
      description: Get a user by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
    patch:
      operationId: updateUser
      tags:
        - users
      summary: Update a user by ID
      description: Update a user by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'

components:
  parameters:
    OffsetParam:
      in: query
      name: offset
      schema:
        type: integer
        example: 0
    PageSizeParam:
      in: query
      name: pageSize
      schema:
        type: integer
        example: 25
    IncludeTotalParam:
      in: query
      name: includeTotal
      schema:
        type: boolean
        example: true
  schemas:
    PaginationMetadata:
      type: object
      properties:
        offset:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 25
        count:
          type: integer
          example: 10
          description: The number of items in the current page
        hasMore:
          type: boolean
          example: true
          description: Whether there are more items to fetch
        total:
          type: integer
          example: 100
          description: The total number of items
      required:
        - offset
        - pageSize
        - count
        - hasMore
    UserCreate:
      type: object
      properties:
        email:
          type: string
          example: "John Doe"
        age:
          type: integer
          example: 30
      required:
        - email
        - age
    UserUpdate:
      type: object
      properties:
        email:
          type: 
            - string
            - "null"
          example: "John Doe"
        age:
          type:
            - integer
            - "null"
          example: 30
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        email:
          type: string
          example: "John Doe"
        age:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2021-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2021-01-01T00:00:00Z"
      required:
        - email
        - age
    UserCreateResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    UserGetResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    UserGetAllResponse:
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/User'
        pageInfo:
            $ref: '#/components/schemas/PaginationMetadata'
    UserUpdateResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        userId:
          type: integer
          example: 1
        amountCents:
          type: string
          example: "10000"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2021-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2021-01-01T00:00:00Z"
      required:
        - userId
        - amountCents