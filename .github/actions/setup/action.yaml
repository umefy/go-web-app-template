name: Setup Environment
description: "Installs dependencies and generates protobuf files"

inputs:
  GO_VERSION:
    description: "The version of Go to use"
    required: false
    default: '>=1.24'
  JAVA_VERSION:
    description: "The version of Java to use"
    required: false
    default: '17'
  OPENAPI_VERSION:
    description: "The version of OpenAPI Generator to use"
    required: false
    default: '7.13.0'
  PROTOC_VERSION:
    description: "The version of Protobuf Compiler to use"
    required: false
    default: '30.1'

runs:
  using: 'composite'
  
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.GO_VERSION }}
        check-latest: true
        cache-dependency-path: '**/*.sum'

    - name: verify go version
      run: go version
      shell: bash 

    - name: Cache Protobuf Compiler
      id: cache-protoc
      uses: actions/cache@v4
      with:
        path: |
          /home/runner/protoc_cache
        key: protoc-${{ runner.os }}-v${{ inputs.PROTOC_VERSION }}
        restore-keys: |
          protoc-${{ runner.os }}-
    
    - name: Install Protobuf Compiler (if not cached)
      if: steps.cache-protoc.outputs.cache-hit != 'true'
      run: |
        PROTOC_VERSION=${{ inputs.PROTOC_VERSION }}
        PROTOC_ZIP=protoc-${PROTOC_VERSION}-linux-x86_64.zip
        wget -q https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP}
        sudo unzip -o ${PROTOC_ZIP} -d /home/runner/protoc_cache
        sudo chmod +x /home/runner/protoc_cache/bin/protoc
        rm ${PROTOC_ZIP}
      shell: bash

    - name: Create Symlinks for Protobuf Files
      run: |
        sudo ln -sf /home/runner/protoc_cache/include/google /usr/local/include/google
        sudo ln -sf /home/runner/protoc_cache/bin/protoc /usr/local/bin/protoc
      shell: bash

    - name: Verify `protoc` Installation
      run: |
        protoc --version
        ls -la /usr/local/include/google
      shell: bash
    
    - name: Install protogen plugins
      id: go-bin-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/go/bin/protoc-gen-go
          ~/go/bin/protoc-gen-go-grpc
          ~/go/bin/wire
          ~/go/bin/mockery
          ~/go/bin/goose
        key: ${{ runner.os }}-go-bin-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-bin-

    - name: Install project required tools
      if: steps.go-bin-cache.outputs.cache-hit != 'true'
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install github.com/google/wire/cmd/wire@latest
        go install github.com/vektra/mockery/v3@latest
        go install github.com/pressly/goose/v3/cmd/goose@latest
        go install golang.org/x/tools/cmd/goimports@latest
        go install github.com/99designs/gqlgen@latest
      shell: bash
    
    # Install Java (Required for OpenAPI Generator)
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.JAVA_VERSION }}

    # Cache OpenAPI Generator CLI
    - name: Cache OpenAPI Generator CLI
      id: cache-openapi
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/openapi-generator-cli.jar
        key: openapi-generator-${{ runner.os }}-${{ inputs.OPENAPI_VERSION }}
        restore-keys: |
          openapi-generator-${{ runner.os }}-

    # Install OpenAPI Generator CLI if not cached
    - name: Install OpenAPI Generator CLI
      if: steps.cache-openapi.outputs.cache-hit != 'true'
      run: |
        OPENAPI_VERSION=${{ inputs.OPENAPI_VERSION }}
        wget "https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${OPENAPI_VERSION}/openapi-generator-cli-${OPENAPI_VERSION}.jar" -O /usr/local/bin/openapi-generator-cli.jar
      shell: bash
    
    - name: Create OpenAPI Generator Symlink
      run: |
        echo '#!/bin/bash' | sudo tee /usr/local/bin/openapi-generator > /dev/null
        echo 'exec java -jar /usr/local/bin/openapi-generator-cli.jar "$@"' | sudo tee -a /usr/local/bin/openapi-generator > /dev/null
        sudo chmod +x /usr/local/bin/openapi-generator
        openapi-generator version
      shell: bash
